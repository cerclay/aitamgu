'use client';

import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { ArrowRight, Sparkles, Flame, Star } from 'lucide-react';
import { motion } from 'framer-motion';
import { ExternalLink } from 'lucide-react';

interface CardData {
  title: string;
  description: string;
  href: string;
  icon: string;
  isExternal: boolean;
  badge?: string;
}

export default function Home() {
  // AI ÏÑúÎπÑÏä§ Ïπ¥ÌÖåÍ≥†Î¶¨ Ïπ¥Îìú
  const aiServiceCards = [
    {
      title: 'Ïú†ÌäúÎ∏å ÏòÅÏÉÅ ÏöîÏïΩ',
      description: 'Ïú†ÌäúÎ∏å ÏòÅÏÉÅÏùò ÎÇ¥Ïö©ÏùÑ AIÍ∞Ä ÏöîÏïΩÌï¥ ÌïµÏã¨Îßå Îπ†Î•¥Í≤å ÌååÏïÖÌïòÏÑ∏Ïöî.',
      href: '/youtube-insight',
      icon: 'üì∫',
      isExternal: false,
      badge: 'Ïã†Í∑ú'
    },
    {
      title: 'ÏùåÏãù ÏπºÎ°úÎ¶¨ Ï∏°Ï†ïÍ∏∞',
      description: 'ÏùåÏãù ÏÇ¨ÏßÑÏùÑ ÏóÖÎ°úÎìúÌïòÎ©¥ AIÍ∞Ä ÏπºÎ°úÎ¶¨Î•º Ï∏°Ï†ïÌï¥ ÎìúÎ¶ΩÎãàÎã§.',
      href: '/calorie-calculator',
      icon: 'üçî',
      isExternal: false,
      badge: 'Ïù∏Í∏∞'
    },
    {
      title: 'ÌÉÄÎ°ú Ïö¥ÏÑ∏Î≥¥Í∏∞',
      description: 'ÌÉÄÎ°ú Ïπ¥ÎìúÎ°ú ÎãπÏã†Ïùò Ïö¥ÏÑ∏Î•º ÌôïÏù∏Ìï¥Î≥¥ÏÑ∏Ïöî.',
      href: '/tarot',
      icon: 'üîÆ',
      isExternal: false
    },
    {
      title: 'Ï†êÏã¨ Î©îÎâ¥ Ï∂îÏ≤ú',
      description: 'ÏúÑÏπò, ÎÇ†Ïî®, Í∏∞Î∂ÑÏóê ÎßûÎäî Ï†êÏã¨ Î©îÎâ¥Î•º Ï∂îÏ≤úÌï¥ ÎìúÎ¶ΩÎãàÎã§.',
      href: '/lunch-recommendation',
      icon: 'üç≤',
      isExternal: false
    },
    {
      title: 'ÏÜêÍ∏à Î∂ÑÏÑùÍ∏∞',
      description: 'AIÍ∞Ä ÎãπÏã†Ïùò ÏÜêÍ∏àÏùÑ Î∂ÑÏÑùÌïòÏó¨ Ïö¥ÏÑ∏Î•º ÏïåÎ†§ÎìúÎ¶ΩÎãàÎã§.',
      href: '/palmistry',
      icon: '‚úã',
      isExternal: false,
      badge: 'Ïù∏Í∏∞'
    },
    {
      title: 'Î°úÎòê Î≤àÌò∏ ÏÉùÏÑ±Í∏∞',
      description: 'ÎãπÏã†Ïùò Ïö¥ÏÑ∏Ïóê ÎßûÎäî Î°úÎòê Î≤àÌò∏Î•º AIÍ∞Ä Ï∂îÏ≤úÌï¥ ÎìúÎ¶ΩÎãàÎã§.',
      href: '/lotto-generator',
      icon: 'üé±',
      isExternal: false,
      badge: 'Ïã†Í∑ú'
    },
    {
      title: 'Ï£ºÏãù Î∂ÑÏÑùÍ∏∞',
      description: 'Í¥ÄÏã¨ ÏûàÎäî Ï£ºÏãùÏùò ÎØ∏Îûò Ï†ÑÎßùÏùÑ AIÍ∞Ä Î∂ÑÏÑùÌï¥ ÎìúÎ¶ΩÎãàÎã§.',
      href: '/stock-analyzer',
      icon: 'üìà',
      isExternal: false,
      badge: 'Ïù∏Í∏∞'
    },
    {
      title: 'ÏõπÌà∞ ÏÉùÏÑ±Í∏∞',
      description: 'AIÍ∞Ä ÎãπÏã†Ïùò ÏïÑÏù¥ÎîîÏñ¥Î•º ÏõπÌà∞ÏúºÎ°ú Î≥ÄÌôòÌï¥ ÎìúÎ¶ΩÎãàÎã§.',
      href: '/webtoon-generator',
      icon: 'üé®',
      isExternal: false,
      badge: 'Í∞úÎ∞úÏ§ë'
    },
    {
      title: 'ÏïåÏïΩ Ïπ¥Î©îÎùº',
      description: 'ÏïåÏïΩ Ïù¥ÎØ∏ÏßÄÎ°ú ÏïΩÌíà Ï†ïÎ≥¥ ÌôïÏù∏',
      href: '/pill-camera',
      icon: 'üíä',
      isExternal: false,
      badge: 'Ïã†Í∑ú'
    }
  ];

  // GPTS Ïπ¥ÌÖåÍ≥†Î¶¨ Ïπ¥Îìú
  const gptsCards = [
    {
      title: 'Î∏îÎ°úÍ∑∏ HTML ÏûëÏÑ±',
      description: 'Ï†ÑÎ¨∏Ï†ÅÏù∏ Î∏îÎ°úÍ∑∏ HTML ÏΩîÎìúÎ•º ÏÜêÏâΩÍ≤å ÏûëÏÑ±Ìï† Ïàò ÏûàÏäµÎãàÎã§.',
      href: 'https://chatgpt.com/g/g-67b2b40b04448191b37578a1108f8b7d-beulrogeu-peurimieom-kweolriti-geuljagseong-html',
      icon: 'üìù',
      isExternal: true
    },
    {
      title: 'ÎÑ§Ïù¥Î≤Ñ Î∏îÎ°úÍ∑∏ ÏûëÏÑ±',
      description: 'ÎÑ§Ïù¥Î≤Ñ Î∏îÎ°úÍ∑∏Ïóê ÏµúÏ†ÅÌôîÎêú Í∏ÄÏùÑ ÏûëÏÑ±Ìï¥ ÎìúÎ¶ΩÎãàÎã§.',
      href: 'https://chatgpt.com/g/g-67b4304f986c81919610c2cac0f7fe0d-neibeo-geulsseugi-wanjeonpan',
      icon: 'üìò',
      isExternal: true
    },
    {
      title: 'Ïπ¥ÎìúÎâ¥Ïä§ (Ïù¥ÎØ∏ÏßÄ 4Ïû•)',
      description: '4Ïû•Ïùò Ïù¥ÎØ∏ÏßÄÎ°ú Íµ¨ÏÑ±Îêú Ïπ¥ÎìúÎâ¥Ïä§Î•º ÏÉùÏÑ±Ìï©ÎãàÎã§.',
      href: 'https://chatgpt.com/g/g-67b6b0c763d88191a7a658ee334fc89e-kadeunyuseu-saengseonggi-imiji4jang',
      icon: 'üñºÔ∏è',
      isExternal: true
    },
    {
      title: 'Ïπ¥ÎìúÎâ¥Ïä§ (Í∏ÄÏî® 5Ïû•)',
      description: '5Ïû•Ïùò Í∏ÄÏî® Ï§ëÏã¨ Ïπ¥ÎìúÎâ¥Ïä§Î•º ÏÉùÏÑ±Ìï©ÎãàÎã§.',
      href: 'https://chatgpt.com/g/g-67b736c11800819189d57e1bb31e5530-kadeunyuseu-saengseonggi-geulssi-beojeon-5jang',
      icon: 'üìä',
      isExternal: true
    },
    {
      title: 'Threads(Ïä§Î†àÎìú) Í∏ÄÏì∞Í∏∞',
      description: 'Threads ÌîåÎû´ÌèºÏóê ÏµúÏ†ÅÌôîÎêú Í∏ÄÏùÑ ÏûëÏÑ±Ìï¥ ÎìúÎ¶ΩÎãàÎã§.',
      href: 'https://chatgpt.com/g/g-67ba68007ed08191953012d83740f2b9-threads-seuredeu-jeonmun-geulsseugi',
      icon: 'üßµ',
      isExternal: true
    },
    {
      title: 'Ïú†ÌäúÎ∏å Ï±ÑÎÑê ÏÉùÏÑ± ÎπÑÏÑú',
      description: 'Ïú†ÌäúÎ∏å Ï±ÑÎÑê ÏÉùÏÑ± Î∞è Ïö¥ÏòÅÏóê ÎèÑÏõÄÏùÑ ÎìúÎ¶ΩÎãàÎã§.',
      href: 'https://chatgpt.com/g/g-67bfe332e30081919d0e23eff795e975-yutyub-caeneol-saengseong-doumi',
      icon: 'üìπ',
      isExternal: true
    }
  ];

  // Ïπ¥Îìú Î†åÎçîÎßÅ Ìï®Ïàò
  const renderCards = (cards: CardData, index: number) => (
    <motion.div
      key={cards.title + index}
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.3, delay: index * 0.1 }}
      whileHover={{ scale: 1.03 }}
      className="h-full"
    >
      {cards.isExternal ? (
        <a href={cards.href} target="_blank" rel="noopener noreferrer" className="block h-full">
          <Card className="h-full border-2 border-gray-100 hover:border-orange-500 transition-all duration-300 shadow-sm hover:shadow-md">
            <CardHeader>
              <div className="text-4xl mb-4">{cards.icon}</div>
              <CardTitle className="text-xl font-bold text-orange-600 flex items-center gap-2">
                {cards.title}
                <ExternalLink className="h-4 w-4 text-gray-400" />
              </CardTitle>
              <CardDescription className="text-gray-600">{cards.description}</CardDescription>
            </CardHeader>
            <CardFooter>
              <div className="text-orange-600 font-medium flex items-center">
                Î∞îÎ°úÍ∞ÄÍ∏∞
                <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                </svg>
              </div>
            </CardFooter>
          </Card>
        </a>
      ) : (
        <Link href={cards.href} className="block h-full">
          <Card className="h-full border-2 border-gray-100 hover:border-orange-500 transition-all duration-300 shadow-sm hover:shadow-md">
            <CardHeader className="relative">
              {cards.badge && (
                <div className="absolute top-4 right-4">
                  {cards.badge === 'Ïù∏Í∏∞' ? (
                    <Badge className="bg-gradient-to-r from-amber-500 to-orange-500 hover:from-amber-600 hover:to-orange-600 text-white font-bold shadow-lg px-3 py-1.5 rounded-full">
                      <Flame className="h-4 w-4 mr-1 animate-pulse" />
                      Ïù∏Í∏∞
                    </Badge>
                  ) : cards.badge === 'Ïã†Í∑ú' ? (
                    <Badge className="bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white font-bold shadow-lg px-3 py-1.5 rounded-full">
                      <Sparkles className="h-4 w-4 mr-1 animate-pulse" />
                      Ïã†Í∑ú
                    </Badge>
                  ) : cards.badge === 'Í∞úÎ∞úÏ§ë' ? (
                    <Badge className="bg-gradient-to-r from-blue-500 to-cyan-500 hover:from-blue-600 hover:to-cyan-600 text-white font-bold shadow-lg px-3 py-1.5 rounded-full">
                      <Star className="h-4 w-4 mr-1 animate-pulse" />
                      Í∞úÎ∞úÏ§ë
                    </Badge>
                  ) : (
                    <span className="px-2 py-1 rounded-full text-xs font-semibold bg-blue-100 text-blue-700">
                      {cards.badge}
                    </span>
                  )}
                </div>
              )}
              <div className="text-4xl mb-4">{cards.icon}</div>
              <CardTitle className="text-xl font-bold text-orange-600">{cards.title}</CardTitle>
              <CardDescription className="text-gray-600">{cards.description}</CardDescription>
            </CardHeader>
            <CardFooter>
              <div className="text-orange-600 font-medium flex items-center">
                ÏûêÏÑ∏Ìûà Î≥¥Í∏∞
                <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                </svg>
              </div>
            </CardFooter>
          </Card>
        </Link>
      )}
    </motion.div>
  );

  return (
    <main className="flex min-h-screen flex-col items-center justify-between p-4 md:p-24">
      <div className="z-10 max-w-5xl w-full items-center justify-between text-sm">
        <section className="mb-16">
          <h1 className="text-4xl font-bold mb-4">AI ÌÉêÍµ¨ÏÉùÌôú</h1>
          <p className="text-xl text-gray-600 mb-8">
            AIÎ°ú Îçî ÎÇòÏùÄ ÏÇ∂ÏùÑ ÎßåÎì§Ïñ¥Í∞ÄÎäî Í≥µÍ∞Ñ
          </p>
        </section>

        <section id="ai-services" className="mb-16">
          <h2 className="text-2xl font-bold mb-6">AI ÏÑúÎπÑÏä§</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {aiServiceCards.map((card, index) => renderCards(card, index))}
          </div>
        </section>

        <section id="gpts" className="mb-16">
          <h2 className="text-2xl font-bold mb-6">GPTs</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {gptsCards.map((card, index) => renderCards(card, index))}
          </div>
        </section>
      </div>
    </main>
  );
}
